{"version":3,"file":"static/js/717.e490400b.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.module.jsx","redux/contacts/selectors.js","components/Modal/Modal.styles.js","components/Modal/Modal.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.module.jsx","components/ContactList/ContactList.jsx","components/Contact/Contact.styles.jsx","components/ContactForm/EditContact.jsx","components/Contact/Contact.jsx","hooks/useContacts.js","components/Filter/Filter.jsx","components/UserContacts/UserContacts.styles.js","components/UserContacts/UserContacts.jsx","pages/PhoneBook.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport {\n  Form as FormicForm,\n  Field as FormicField,\n  ErrorMessage as FormicError,\n} from 'formik';\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const Form = styled(FormicForm)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  width: 400px;\n  padding: 10px;\n  border: 1px solid black;\n  border-radius: 10px;\n`;\n\nexport const Field = styled(FormicField)`\n  height: 30px;\n  padding-left: 8px;\n  padding-right: 8px;\n  border-radius: 5px;\n`;\n\nexport const SubmitBtn = styled.button`\n  appearance: none;\n  background-color: #ffffff;\n  border: 1px solid gray;\n  border-radius: 5px;\n  box-sizing: border-box;\n  color: #000000;\n  cursor: pointer;\n  display: inline-block;\n  font-size: 14px;\n  font-weight: 500;\n  letter-spacing: 0;\n  line-height: 1em;\n  margin: 0;\n  opacity: 1;\n  outline: 0;\n  padding: 15px;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  text-rendering: geometricprecision;\n  transition: opacity 300ms cubic-bezier(0.694, 0, 0.335, 1),\n    background-color 100ms cubic-bezier(0.694, 0, 0.335, 1),\n    color 100ms cubic-bezier(0.694, 0, 0.335, 1);\n  user-select: none;\n  -webkit-user-select: none;\n  touch-action: manipulation;\n  vertical-align: baseline;\n  white-space: nowrap;\n\n  &:before {\n    animation: opacityFallbackOut 0.5s step-end forwards;\n    backface-visibility: hidden;\n    background-color: #ebebeb;\n    clip-path: polygon(-1% 0, 0 0, -25% 100%, -1% 100%);\n    content: '';\n    height: 100%;\n    left: 0;\n    position: absolute;\n    top: 0;\n    transform: translateZ(0);\n    transition: clip-path 0.5s cubic-bezier(0.165, 0.84, 0.44, 1),\n      -webkit-clip-path 0.5s cubic-bezier(0.165, 0.84, 0.44, 1);\n    width: 100%;\n  }\n\n  &:hover:before {\n    animation: opacityFallbackIn 0s step-start forwards;\n    clip-path: polygon(0 0, 101% 0, 101% 101%, 0 101%);\n  }\n\n  &:after {\n    background-color: #ffffff;\n  }\n\n  & .text {\n    z-index: 1;\n    position: relative;\n  }\n`;\n\nexport const ErrorMessage = styled(FormicError)`\n  color: tomato;\n  font-size: 12px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContactsFilter = state => state.filter;\n\nexport const selectUserContacts = createSelector(\n  [selectContacts, selectContactsFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.6);\n  z-index: 2;\n`;\n\nexport const ModalWindow = styled.div`\n  width: 320px;\n  padding: 5px;\n`;\n","import { Overlay, ModalWindow } from './Modal.styles';\nimport { useEffect } from 'react';\n\nexport const ModalForm = ({ children, onClose }) => {\n  // const { onClose } = props;\n  // const onEscapeDown = e => {\n  //   if (e.code !== 'Escape') return;\n  //   onClose();\n  // };\n\n  useEffect(() => {\n    const onEscapeDown = e => {\n      if (e.code !== 'Escape') return;\n      onClose();\n    };\n\n    window.addEventListener('keydown', onEscapeDown);\n    return () => {\n      window.removeEventListener('keydown', onEscapeDown);\n    };\n  }, [onClose]);\n\n  const handleClick = e => {\n    if (e.target.nodeName !== 'DIV') return;\n    onClose();\n  };\n\n  return (\n    <Overlay onClick={handleClick}>\n      <ModalWindow>{children}</ModalWindow>\n    </Overlay>\n  );\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport {\n  FormField,\n  Form,\n  Field,\n  SubmitBtn,\n  ErrorMessage,\n} from './ContactForm.module';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operationsContacts';\nimport { selectUserContacts } from 'redux/contacts/selectors';\nimport { ModalForm } from 'components/Modal/Modal';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst phoneRegExp =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'must be at least 3 characters long')\n    .max(25, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .min(7, 'Too Short!')\n    .max(25, 'Too Long!')\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .required('A phone number is required'),\n});\n\nexport const ContactForm = ({ onClose }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectUserContacts);\n\n  const handleSubmit = (values, actions) => {\n    const nameExists = contacts.find(contact =>\n      contact.name.toLowerCase().includes(values.name.toLowerCase())\n    );\n\n    if (nameExists) {\n      return alert(`${values.name} is already in contacts!`);\n    }\n    actions.resetForm();\n    dispatch(\n      addContact({\n        ...values,\n      })\n    );\n    onClose();\n  };\n\n  return (\n    <ModalForm onClose={onClose}>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={SignupSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form autoComplete=\"off\">\n          <FormField htmlFor=\"name\">\n            Name\n            <Field type=\"text\" name=\"name\" placeholder=\"Name\" />\n            <ErrorMessage name=\"name\" component=\"span\" />\n          </FormField>\n          <FormField htmlFor=\"name\">\n            Number\n            <Field type=\"tel\" name=\"number\" placeholder=\"Phone number\" />\n            <ErrorMessage name=\"number\" component=\"span\" />\n          </FormField>\n          <SubmitBtn type=\"submit\">\n            <span className=\"text\">Add contact</span>\n          </SubmitBtn>\n        </Form>\n      </Formik>\n    </ModalForm>\n  );\n};\n\nContactForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ContactWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 10px;\n`;\n","import { ContactWrapper } from './ContactList.module';\n\nexport const ContactList = ({ children }) => {\n  return <ContactWrapper>{children}</ContactWrapper>;\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin-top: 10px;\n  font-family: 'Roboto', sans-serif;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: space-between;\n  padding-left: 0;\n  padding: 10px;\n  /* height: auto;\n  overflow-y: scroll; */\n`;\n\nexport const Name = styled.span`\n  display: block;\n  font-weight: 500;\n  font-size: 18px;\n`;\nexport const Number = styled.span`\n  display: block;\n  margin-left: 10px;\n  font-weight: 500;\n  font-size: 16px;\n`;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport {\n  FormField,\n  Form,\n  Field,\n  SubmitBtn,\n  ErrorMessage,\n} from './ContactForm.module';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { editContact } from 'redux/contacts/operationsContacts';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { ModalForm } from 'components/Modal/Modal';\n\nconst phoneRegExp =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'must be at least 3 characters long')\n    .max(25, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .min(7, 'Too Short!')\n    .max(25, 'Too Long!')\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .required('A phone number is required'),\n});\n\nexport const EditContact = ({ item, onClose }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  // const handleSubmit = (values, actions) => {\n  //   if (\n  //     contacts.find(contact =>\n  //       contact.name.toLowerCase().includes(values.name.toLowerCase())\n  //     )\n  //   ) {\n  //     window.alert(`${values.name} is already in contacts!`);\n  //   } else {\n  //     dispatch(editContact(values));\n  //     actions.resetForm();\n  //     dispatch(fetchContacts());\n  //   }\n  // };\n  console.log(item);\n  const handleSubmit = (values, actions) => {\n    console.log(values);\n    const nameExists = contacts.find(\n      contact =>\n        contact.name.toLowerCase().includes(values.name.toLowerCase()) &&\n        contact.id !== item.id\n    );\n\n    if (nameExists) {\n      return alert(`${values.name} is already in contacts!`);\n    }\n    actions.resetForm();\n    dispatch(editContact(values));\n    onClose();\n  };\n\n  return (\n    <ModalForm onClose={onClose}>\n      <Formik\n        initialValues={{\n          id: item.id,\n          name: item.name,\n          number: item.number,\n        }}\n        validationSchema={SignupSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form autoComplete=\"off\">\n          <FormField htmlFor=\"name\">\n            Name\n            <Field type=\"text\" name=\"name\" placeholder=\"Name\" />\n            <ErrorMessage name=\"name\" component=\"span\" />\n          </FormField>\n          <FormField htmlFor=\"name\">\n            Number\n            <Field type=\"tel\" name=\"number\" placeholder=\"Phone number\" />\n            <ErrorMessage name=\"number\" component=\"span\" />\n          </FormField>\n          <SubmitBtn type=\"submit\">\n            <span className=\"text\">Add contact</span>\n          </SubmitBtn>\n        </Form>\n      </Formik>\n    </ModalForm>\n  );\n};\n\nEditContact.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","// import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport CreateIcon from '@mui/icons-material/Create';\nimport {\n  // Grid,\n  IconButton,\n  ListItem,\n  Avatar,\n  ListItemAvatar,\n  Stack,\n} from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { Name, Number, Container, List } from './Contact.styles';\nimport { deleteContact } from 'redux/contacts/operationsContacts';\nimport { useContacts } from 'hooks/useContacts';\nimport { EditContact } from 'components/ContactForm/EditContact';\n\nexport const ContactItem = () => {\n  const dispatch = useDispatch();\n  const contacts = useContacts();\n  const [modal, setModal] = useState(false);\n  const [selectedContact, setSelectedContact] = useState(null);\n\n  const handleOpen = contact => {\n    setSelectedContact(contact);\n    setModal(true);\n    console.log(contact);\n  };\n  const handleClose = () => setModal(false);\n\n  contacts.sort(function (firstName, secondName) {\n    return firstName.name.localeCompare(secondName.name);\n  });\n\n  function stringToColor(string) {\n    let hash = 0;\n    let i;\n    for (i = 0; i < string.length; i += 1) {\n      hash = string.charCodeAt(i) + ((hash << 5) - hash);\n    }\n\n    let color = '#';\n\n    for (i = 0; i < 3; i += 1) {\n      const value = (hash >> (i * 8)) & 0xff;\n      color += `00${value.toString(16)}`.slice(-2);\n    }\n    return color;\n  }\n\n  function stringAvatar(name) {\n    let nameFirstLetters = '';\n    if (name.includes(' ')) {\n      nameFirstLetters = `${name.toUpperCase().split(' ')[0][0]}${\n        name.toUpperCase().split(' ')[1][0]\n      }`;\n    } else {\n      nameFirstLetters = `${name.toUpperCase().split(' ')[0][0]}`;\n    }\n    return {\n      sx: {\n        bgcolor: stringToColor(name),\n      },\n      children: nameFirstLetters,\n    };\n  }\n\n  return (\n    <Container>\n      <List>\n        {contacts.map(({ id, name, number }) => (\n          <ListItem\n            key={id}\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              border: '1px solid gray ',\n              boxShadow: '5px 5px 15px 5px rgba(0, 0, 0, 0)',\n              borderRadius: '10px',\n            }}\n          >\n            <ListItemAvatar>\n              <Avatar {...stringAvatar(`${name}`)} />\n            </ListItemAvatar>\n\n            <Name>{name}:</Name>\n            <Number>{number}</Number>\n\n            <Stack direction=\"row\" spacing={1} sx={{ ml: 5 }}>\n              <IconButton\n                edge=\"start\"\n                aria-label=\"change\"\n                id={id}\n                color=\"gray\"\n                onClick={() => handleOpen({ id, name, number })}\n                sx={{\n                  '&:hover': {\n                    color: '#2196f3',\n                  },\n                  '&:focus': {\n                    color: '#2196f3',\n                  },\n                }}\n              >\n                <CreateIcon />\n              </IconButton>\n              <IconButton\n                edge=\"end\"\n                aria-label=\"delete\"\n                id={id}\n                color=\"gray\"\n                onClick={() => dispatch(deleteContact(id))}\n                sx={{\n                  '&:hover': {\n                    color: '#f44336',\n                  },\n                  '&:focus': {\n                    color: '#f44336',\n                  },\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </Stack>\n          </ListItem>\n        ))}\n        {modal && <EditContact item={selectedContact} onClose={handleClose} />}\n      </List>\n    </Container>\n  );\n};\n\n// ContactItem.propType = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       numder: PropTypes.string.isRequired,\n//     })\n//   ).isRequired,\n//   onDelete: PropTypes.func.isRequired,\n// };\n","import { useSelector } from 'react-redux';\n\nimport { selectUserContacts } from 'redux/contacts/selectors';\n\nconst useContacts = () => useSelector(selectUserContacts);\n\nexport { useContacts };\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContactsFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filtersSlice';\nimport { Box, Container, InputAdornment, TextField } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectContactsFilter);\n\n  const changeFilter = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n  return (\n    <>\n      <Container>\n        <Box\n          sx={{\n            marginTop: 2,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <TextField\n            margin=\"normal\"\n            size=\"small\"\n            id=\"filter\"\n            label=\"Find contacts by name\"\n            name=\"filter\"\n            value={filter}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              ),\n            }}\n            onChange={changeFilter}\n          />\n        </Box>\n      </Container>\n    </>\n    // <FilterTitle>\n    //   Find contacts by name\n    //   <FilterInput\n    //     type=\"text\"\n    //     value={filter}\n    //     onChange={changeFilter}\n    //     placeholder=\"Contact name\"\n    //   />\n    // </FilterTitle>\n  );\n};\n\nFilter.protoType = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  text-align: center;\n  margin: 10px auto;\n`;\n\nexport const H1 = styled.h1`\n  color: #1976d2;\n`;\n","import { ContactForm } from '../ContactForm/ContactForm';\nimport { ContactList } from '../ContactList/ContactList';\nimport { ContactItem } from '../Contact/Contact';\nimport { Button } from '@mui/material';\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\nimport { Filter } from '../Filter/Filter';\nimport { Container } from './UserContacts.styles.js';\nimport { fetchContacts } from 'redux/contacts/operationsContacts';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\nimport { useEffect, useState } from 'react';\nimport { Typography } from '@mui/material';\n\nexport default function UserContacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const [modal, setModal] = useState(false);\n\n  const handleOpen = () => setModal(true);\n  const handleClose = () => setModal(false);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Button onClick={handleOpen} startIcon={<PersonAddIcon />}>\n        Add Contacts\n      </Button>\n      {modal && <ContactForm onClose={handleClose} />}\n\n      <ContactList>\n        <Typography component=\"h1\" variant=\"h5\">\n          Contacts\n        </Typography>\n        <Filter />\n        {isLoading && !error && (\n          <p>Please wait while the data is being checked.</p>\n        )}\n        <ContactItem />\n      </ContactList>\n    </Container>\n  );\n}\n","import UserContacts from 'components/UserContacts/UserContacts';\n\nexport default function PhoneBook() {\n  return (\n    <div>\n      <UserContacts />\n    </div>\n  );\n}\n"],"names":["FormField","styled","Form","FormicForm","Field","FormicField","SubmitBtn","ErrorMessage","FormicError","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectContactsFilter","filter","selectUserContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","Overlay","ModalWindow","ModalForm","children","onClose","useEffect","onEscapeDown","e","code","window","addEventListener","removeEventListener","onClick","target","nodeName","initialValues","number","SignupSchema","Yup","shape","min","max","required","matches","ContactForm","dispatch","useDispatch","useSelector","validationSchema","onSubmit","values","actions","find","alert","resetForm","addContact","autoComplete","htmlFor","type","placeholder","component","className","ContactWrapper","ContactList","Container","List","Name","Number","EditContact","item","console","log","id","editContact","ContactItem","useState","modal","setModal","selectedContact","setSelectedContact","stringToColor","string","i","hash","length","charCodeAt","color","toString","slice","stringAvatar","nameFirstLetters","toUpperCase","split","sx","bgcolor","sort","firstName","secondName","localeCompare","map","ListItem","display","alignItems","justifyContent","border","boxShadow","borderRadius","ListItemAvatar","Avatar","Stack","direction","spacing","ml","IconButton","edge","Create","deleteContact","Delete","Filter","Box","marginTop","flexDirection","TextField","margin","size","label","value","InputProps","startAdornment","InputAdornment","position","Search","onChange","setFilter","currentTarget","protoType","PropTypes","UserContacts","fetchContacts","Button","startIcon","PersonAdd","Typography","variant","PhoneBook"],"sourceRoot":""}