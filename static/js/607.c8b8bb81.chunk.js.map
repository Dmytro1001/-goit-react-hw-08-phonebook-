{"version":3,"file":"static/js/607.c8b8bb81.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.module.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.module.jsx","components/ContactList/ContactList.jsx","components/Contact/Contact.styles.jsx","components/Contact/Contact.jsx","hooks/useContacts.js","components/Filter/Filter.jsx","components/UserContacts/UserContacts.styles.js","components/UserContacts/UserContacts.jsx","pages/PhoneBook.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport {\n  Form as FormicForm,\n  Field as FormicField,\n  ErrorMessage as FormicError,\n} from 'formik';\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const Form = styled(FormicForm)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  width: 400px;\n  padding: 10px;\n  border: 1px solid black;\n  border-radius: 10px;\n`;\n\nexport const Field = styled(FormicField)`\n  height: 30px;\n  padding-left: 8px;\n  padding-right: 8px;\n  border-radius: 5px;\n`;\n\nexport const SubmitBtn = styled.button`\n  appearance: none;\n  background-color: #ffffff;\n  border: 1px solid gray;\n  border-radius: 5px;\n  box-sizing: border-box;\n  color: #000000;\n  cursor: pointer;\n  display: inline-block;\n  font-size: 14px;\n  font-weight: 500;\n  letter-spacing: 0;\n  line-height: 1em;\n  margin: 0;\n  opacity: 1;\n  outline: 0;\n  padding: 15px;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  text-rendering: geometricprecision;\n  transition: opacity 300ms cubic-bezier(0.694, 0, 0.335, 1),\n    background-color 100ms cubic-bezier(0.694, 0, 0.335, 1),\n    color 100ms cubic-bezier(0.694, 0, 0.335, 1);\n  user-select: none;\n  -webkit-user-select: none;\n  touch-action: manipulation;\n  vertical-align: baseline;\n  white-space: nowrap;\n\n  &:before {\n    animation: opacityFallbackOut 0.5s step-end forwards;\n    backface-visibility: hidden;\n    background-color: #ebebeb;\n    clip-path: polygon(-1% 0, 0 0, -25% 100%, -1% 100%);\n    content: '';\n    height: 100%;\n    left: 0;\n    position: absolute;\n    top: 0;\n    transform: translateZ(0);\n    transition: clip-path 0.5s cubic-bezier(0.165, 0.84, 0.44, 1),\n      -webkit-clip-path 0.5s cubic-bezier(0.165, 0.84, 0.44, 1);\n    width: 100%;\n  }\n\n  &:hover:before {\n    animation: opacityFallbackIn 0s step-start forwards;\n    clip-path: polygon(0 0, 101% 0, 101% 101%, 0 101%);\n  }\n\n  &:after {\n    background-color: #ffffff;\n  }\n\n  & .text {\n    z-index: 1;\n    position: relative;\n  }\n`;\n\nexport const ErrorMessage = styled(FormicError)`\n  color: tomato;\n  font-size: 12px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContactsFilter = state => state.filter;\n\nexport const selectUserContacts = createSelector(\n  [selectContacts, selectContactsFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","// import PropTypes from 'prop-types';\nimport React from 'react';\n// import { nanoid } from 'nanoid';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport {\n  FormField,\n  Form,\n  Field,\n  SubmitBtn,\n  ErrorMessage,\n} from './ContactForm.module';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operationsContacts';\nimport { selectUserContacts } from 'redux/contacts/selectors';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst phoneRegExp =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'must be at least 3 characters long')\n    .max(25, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .min(7, 'Too Short!')\n    .max(25, 'Too Long!')\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .required('A phone number is required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectUserContacts);\n\n  const handleSubmit = (values, actions) => {\n    const nameExists = contacts.find(contact =>\n      contact.name.toLowerCase().includes(values.name.toLowerCase())\n    );\n\n    if (nameExists) {\n      return alert(`${values.name} is already in contacts!`);\n    }\n    actions.resetForm();\n    dispatch(\n      addContact({\n        ...values,\n      })\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={SignupSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form autoComplete=\"off\">\n        <FormField htmlFor=\"name\">\n          Name\n          <Field type=\"text\" name=\"name\" placeholder=\"Name\" />\n          <ErrorMessage name=\"name\" component=\"span\" />\n        </FormField>\n        <FormField htmlFor=\"name\">\n          Number\n          <Field type=\"tel\" name=\"number\" placeholder=\"Phone number\" />\n          <ErrorMessage name=\"number\" component=\"span\" />\n        </FormField>\n        <SubmitBtn type=\"submit\">\n          <span className=\"text\">Add contact</span>\n        </SubmitBtn>\n      </Form>\n    </Formik>\n  );\n};\n\n// ContactForm.propTypes = {\n//   addContact: PropTypes.func.isRequired,\n// };\n","import styled from '@emotion/styled';\n\nexport const ContactWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  width: 400px;\n  border: 1px solid black;\n  border-radius: 5px;\n`;\n","import { ContactWrapper } from './ContactList.module';\n\nexport const ContactList = ({ children }) => {\n  return (\n    <ContactWrapper>\n      <h2>Contacts</h2>\n      {children}\n    </ContactWrapper>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin-top: 10px;\n  font-family: 'Roboto', sans-serif;\n`;\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: auto auto auto;\n  justify-content: space-between;\n`;\n\nexport const Name = styled.span`\n  display: block;\n  font-weight: 500;\n  font-size: 18px;\n`;\nexport const Number = styled.span`\n  display: block;\n  margin-left: 10px;\n  font-weight: 500;\n  font-size: 16px;\n`;\n","// import PropTypes from 'prop-types';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport CreateIcon from '@mui/icons-material/Create';\nimport {\n  Grid,\n  IconButton,\n  ListItem,\n  Avatar,\n  ListItemAvatar,\n  Stack,\n} from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { Name, Number, Container, List } from './Contact.styles';\nimport { deleteContact } from 'redux/contacts/operationsContacts';\nimport { useContacts } from 'hooks/useContacts';\n\nexport const ContactItem = () => {\n  const dispatch = useDispatch();\n  const contacts = useContacts();\n  function stringToColor(string) {\n    let hash = 0;\n    let i;\n    for (i = 0; i < string.length; i += 1) {\n      hash = string.charCodeAt(i) + ((hash << 5) - hash);\n    }\n\n    let color = '#';\n\n    for (i = 0; i < 3; i += 1) {\n      const value = (hash >> (i * 8)) & 0xff;\n      color += `00${value.toString(16)}`.slice(-2);\n    }\n    return color;\n  }\n\n  function stringAvatar(name) {\n    let nameFirstLetters = '';\n    if (name.includes(' ')) {\n      nameFirstLetters = `${name.toUpperCase().split(' ')[0][0]}${\n        name.toUpperCase().split(' ')[1][0]\n      }`;\n    } else {\n      nameFirstLetters = `${name.toUpperCase().split(' ')[0][0]}`;\n    }\n    return {\n      sx: {\n        bgcolor: stringToColor(name),\n      },\n      children: nameFirstLetters,\n    };\n  }\n\n  return (\n    <Container>\n      <List>\n        <Grid\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          {contacts.map(({ id, name, number }) => (\n            <ListItem key={id}>\n              <ListItemAvatar>\n                <Avatar {...stringAvatar(`${name}`)} />\n              </ListItemAvatar>\n\n              <Name>{name}:</Name>\n              <Number>{number}</Number>\n\n              <Stack direction=\"row\" spacing={1} sx={{ ml: 5 }}>\n                <IconButton\n                  edge=\"start\"\n                  aria-label=\"change\"\n                  id={id}\n                  color=\"primary\"\n                >\n                  <CreateIcon />\n                </IconButton>\n                <IconButton\n                  edge=\"end\"\n                  aria-label=\"delete\"\n                  id={id}\n                  color=\"error\"\n                  onClick={() => dispatch(deleteContact(id))}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </Stack>\n            </ListItem>\n          ))}\n        </Grid>\n      </List>\n    </Container>\n  );\n};\n\n// ContactItem.propType = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       numder: PropTypes.string.isRequired,\n//     })\n//   ).isRequired,\n//   onDelete: PropTypes.func.isRequired,\n// };\n","import { useSelector } from 'react-redux';\n\nimport { selectUserContacts } from 'redux/contacts/selectors';\n\nconst useContacts = () => useSelector(selectUserContacts);\n\nexport { useContacts };\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContactsFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filtersSlice';\nimport { Box, Container, InputAdornment, TextField } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectContactsFilter);\n\n  const changeFilter = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n  return (\n    <>\n      <Container>\n        <Box\n          sx={{\n            marginTop: 2,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <TextField\n            margin=\"normal\"\n            size=\"small\"\n            id=\"filter\"\n            label=\"Find contacts by name\"\n            name=\"filter\"\n            value={filter}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              ),\n            }}\n            onChange={changeFilter}\n          />\n        </Box>\n      </Container>\n    </>\n    // <FilterTitle>\n    //   Find contacts by name\n    //   <FilterInput\n    //     type=\"text\"\n    //     value={filter}\n    //     onChange={changeFilter}\n    //     placeholder=\"Contact name\"\n    //   />\n    // </FilterTitle>\n  );\n};\n\nFilter.protoType = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  padding-top: 0px;\n`;\n","import { ContactForm } from '../ContactForm/ContactForm';\nimport { ContactList } from '../ContactList/ContactList';\nimport { ContactItem } from '../Contact/Contact';\nimport { Filter } from '../Filter/Filter';\nimport { Wrapper } from './UserContacts.styles.js';\nimport { fetchContacts } from 'redux/contacts/operationsContacts';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\n\nexport default function UserContacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Wrapper>\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm />\n      </div>\n      <ContactList>\n        <Filter />\n        {isLoading && !error && (\n          <p>Please wait while the data is being checked.</p>\n        )}\n        <ContactItem />\n      </ContactList>\n    </Wrapper>\n  );\n}\n","import UserContacts from 'components/UserContacts/UserContacts';\n\nexport default function PhoneBook() {\n  return (\n    <div>\n      <UserContacts />\n    </div>\n  );\n}\n"],"names":["FormField","styled","Form","FormicForm","Field","FormicField","SubmitBtn","ErrorMessage","FormicError","selectIsLoading","state","contacts","isLoading","selectError","error","selectContactsFilter","filter","selectUserContacts","createSelector","items","normalizedFilter","toLowerCase","contact","name","includes","initialValues","number","SignupSchema","Yup","shape","min","max","required","matches","ContactForm","dispatch","useDispatch","useSelector","validationSchema","onSubmit","values","actions","find","alert","resetForm","addContact","autoComplete","htmlFor","type","placeholder","component","className","ContactWrapper","ContactList","children","Container","List","Name","Number","ContactItem","stringToColor","string","i","hash","length","charCodeAt","color","toString","slice","stringAvatar","nameFirstLetters","toUpperCase","split","sx","bgcolor","Grid","display","flexDirection","alignItems","justifyContent","map","id","ListItem","ListItemAvatar","Avatar","Stack","direction","spacing","ml","IconButton","edge","Create","onClick","deleteContact","Delete","Filter","Box","marginTop","TextField","margin","size","label","value","InputProps","startAdornment","InputAdornment","position","Search","onChange","e","setFilter","currentTarget","protoType","PropTypes","Wrapper","UserContacts","useEffect","fetchContacts","PhoneBook"],"sourceRoot":""}